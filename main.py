import sqlite3
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import configparser
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
config = configparser.ConfigParser()
config.read('config.ini')
TOKEN = config['telegram']['token']

# –ü–æ—à—É–∫ —Ö–≤–æ—Ä–æ–±
def find_diseases(symptoms_list):
    conn = sqlite3.connect('database/database.db')
    c = conn.cursor()

    placeholders = ', '.join('?' for _ in symptoms_list)
    query = f'''
        SELECT diseases.name, diseases.treatment,
               GROUP_CONCAT(DISTINCT medications.medication_name)
        FROM diseases
        JOIN symptoms ON diseases.id = symptoms.disease_id
        LEFT JOIN medications ON diseases.id = medications.disease_id
        WHERE symptoms.symptom_text IN ({placeholders})
        GROUP BY diseases.id
    '''
    c.execute(query, symptoms_list)
    results = c.fetchall()
    conn.close()
    return results

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()
    symptoms = [s.strip() for s in user_input.split(',')]
    results = find_diseases(symptoms)

    if results:
        response = "\n\n".join([
            f"ü¶† –•–≤–æ—Ä–æ–±–∞: {name}\nüíä –õ—ñ–∫—É–≤–∞–Ω–Ω—è: {treatment}\nüìã –õ—ñ–∫–∏: {medications if medications else '–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö'}"
            for name, treatment, medications in results
        ])
    else:
        response = "üòï –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ö–≤–æ—Ä–æ–± –∑ —Ç–∞–∫–∏–º–∏ —Å–∏–º–ø—Ç–æ–º–∞–º–∏."

    await update.message.reply_text(response)

# –û–±—Ä–æ–±–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ —Å–∏–º–ø—Ç–æ–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É ‚Äî —è –ø—ñ–¥–∫–∞–∂—É –º–æ–∂–ª–∏–≤—ñ —Ö–≤–æ—Ä–æ–±–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    if not os.path.exists("database/database.db"):
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°—Ç–≤–æ—Ä–∏ —ó—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    else:
        main()

